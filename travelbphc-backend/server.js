// travelbphc-backend/server.js
require('dotenv').config(); // Loads variables from your .env file
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const jwt = require('jsonwebtoken'); // For JWTs
const bcrypt = require('bcryptjs'); // For password hashing
const app = express();
const port = process.env.PORT || 5000; // Use port from .env or default to 5000


//const app = express();
//const port = process.env.PORT || 5000; // Use port from .env or default to 5000


// Middleware: Essential for handling requests
app.use(cors()); // Enables cross-origin requests (frontend to backend)
app.use(express.json()); // Parses JSON data sent in requests

// Connect to MongoDB Atlas
mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('MongoDB Atlas Connected Successfully!'))
    .catch(err => console.error('MongoDB connection error:', err));

// Define the schema for your travel posts (what data each post will hold)
const postSchema = new mongoose.Schema({
    origin: { type: String, required: true },
    destination: { type: String, required: true },
    date: { type: String, required: true }, // Storing as string for simplicity on Day 1
    time: { type: String, required: true }, // Storing as string for simplicity on Day 1
    notes: { type: String, default: '' },
    createdAt: { type: Date, default: Date.now } // Automatically set creation time
});
const Post = mongoose.model('Post', postSchema); // Create a Mongoose Model from the schema
// Import your Mongoose models
//const Post = require('./models/Post'); // Your existing Post model
const User = require('./models/User'); // Your new User model

// API Routes: Endpoints for your frontend to interact with

// GET all posts (e.g., http://localhost:5000/api/posts)
app.get('/api/posts', async (req, res) => {
    try {
        const posts = await Post.find().sort({ createdAt: -1 }); // Find all posts, sort by newest first
        res.json(posts); // Send them as JSON
    } catch (err) {
        res.status(500).json({ message: err.message }); // Send error if something goes wrong
    }
});

// POST a new post (e.g., http://localhost:5000/api/posts)
app.post('/api/posts', async (req, res) => {
    const { origin, destination, date, time, notes } = req.body; // Get data from the request body
    const newPost = new Post({ origin, destination, date, time, notes }); // Create a new Post object

    try {
        const savedPost = await newPost.save(); // Save the new post to MongoDB
        res.status(201).json(savedPost); // Send back the saved post with a 201 Created status
    } catch (err) {
        res.status(400).json({ message: err.message }); // Send error if data is invalid
    }
});

// DELETE a post by ID (e.g., http://localhost:5000/api/posts/60d5ec49c612b4001c8c9e5a)
app.delete('/api/posts/:id', async (req, res) => {
    try {
        const deletedPost = await Post.findByIdAndDelete(req.params.id);
        if (!deletedPost) {
            return res.status(404).json({ message: 'Post not found' });
        }
        res.json({ message: 'Post deleted successfully', deletedPost });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// PUT (Update) a post by ID
app.put('/api/posts/:id', async (req, res) => {
    try {
        const { origin, destination, date, time, notes } = req.body;
        const updatedPost = await Post.findByIdAndUpdate(
            req.params.id,
            { origin, destination, date, time, notes },
            { new: true, runValidators: true }
        );

        if (!updatedPost) {
            return res.status(404).json({ message: 'Post not found' });
        }
        res.json(updatedPost);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// --- NEW: User Authentication Routes ---

// @route   POST /api/auth/register
// @desc    Register a new user
// @access  Public
app.post('/api/auth/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        // 1. Check if user already exists
        let user = await User.findOne({ email });
        if (user) {
            return res.status(400).json({ message: 'User already exists' });
        }

        // 2. Create new user instance
        user = new User({ email, password }); // Password will be hashed by the pre-save hook

        // 3. Save user to database
        await user.save();

        // 4. Generate JWT token
        // Use user.id for the payload, as it's unique and generated by MongoDB
        const payload = {
            user: {
                id: user.id
            }
        };

        jwt.sign(
            payload,
            process.env.JWT_SECRET, // JWT_SECRET will be defined in your .env file
            { expiresIn: '1h' }, // Token expires in 1 hour
            (err, token) => {
                if (err) throw err;
                res.status(201).json({ token, message: 'User registered successfully!' }); // Send token back to frontend
            }
        );

    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server error');
    }
});

// Start the server and listen for requests
app.listen(port, () => {
    console.log(`Backend server running on http://localhost:${port}`);
});